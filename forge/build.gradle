plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.modrinth.minotaur" version "2.+"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "projectiles-common.mixins.json"
        mixinConfig "projectiles.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "${rootProject.minecraft_version}-Forge"
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
modrinth{
    token = System.getenv("MODRINTH_TOKEN")
    versionName = "${project.archives_base_name}-${project.mod_version}-${project.minecraft_version}-${project.forge_suffix}"
    projectId = modrinth_id
    versionNumber = project.mod_version
    versionType = project.forge_release_type
    uploadFile = remapJar
    gameVersions = [project.minecraft_version]
    loaders = ["forge"]
    changelog = project.changelog
    dependencies{
        required.version forge_modrinth_dependancies
    }
    debugMode = project.forge_debug.toBoolean()
}
tasks.getByName('curseforge').dependsOn(':build', ':forge:remapJar')
curseforge{
    apiKey = System.getenv("CURSEFORGE_API")
    project {
        id = project.curseforge_id
        changelog = project.changelog
        releaseType = project.forge_release_type
        addGameVersion 'Forge'
        addGameVersion project.minecraft_version
        relations {
            requiredDependency project.curseforge_dependency
        }
        mainArtifact(remapJar){
            displayName = "${project.archives_base_name}-${project.mod_version}-${project.minecraft_version}-${project.forge_suffix}"
        }

    }
    options{
        debug = project.forge_debug.toBoolean()
    }
}